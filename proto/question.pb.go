// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: question.proto

/*
	Package question is a generated protocol buffer package.

	It is generated from these files:
		question.proto

	It has these top-level messages:
		RspStatus
		UploadResultRequest
		UploadResultResponse
		IndexRequest
		IndexResponse
		IndexConfig
		GetUserShareRequest
		GetUserShareResponse
		GetQuestionRequest
		GetQuestionResponse
		QuestionList
*/
package question

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RspStatus struct {
	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RspStatus) Reset()                    { *m = RspStatus{} }
func (m *RspStatus) String() string            { return proto.CompactTextString(m) }
func (*RspStatus) ProtoMessage()               {}
func (*RspStatus) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{0} }

type UploadResultRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
	Score  int64 `protobuf:"varint,2,opt,name=score,proto3" json:"score"`
}

func (m *UploadResultRequest) Reset()                    { *m = UploadResultRequest{} }
func (m *UploadResultRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadResultRequest) ProtoMessage()               {}
func (*UploadResultRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{1} }

type UploadResultResponse struct {
	Status *RspStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *UploadResultResponse) Reset()                    { *m = UploadResultResponse{} }
func (m *UploadResultResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadResultResponse) ProtoMessage()               {}
func (*UploadResultResponse) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{2} }

// index request
type IndexRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *IndexRequest) Reset()                    { *m = IndexRequest{} }
func (m *IndexRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexRequest) ProtoMessage()               {}
func (*IndexRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{3} }

// index response
type IndexResponse struct {
	Status      *RspStatus   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Chance      int64        `protobuf:"varint,2,opt,name=chance,proto3" json:"chance"`
	Score       int64        `protobuf:"varint,3,opt,name=score,proto3" json:"score"`
	TodayShares int64        `protobuf:"varint,4,opt,name=today_shares,json=todayShares,proto3" json:"today_shares"`
	Goods       int64        `protobuf:"varint,5,opt,name=goods,proto3" json:"goods"`
	Sign        string       `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign"`
	Gift        []string     `protobuf:"bytes,7,rep,name=gift" json:"gift"`
	Config      *IndexConfig `protobuf:"bytes,8,opt,name=config" json:"config"`
}

func (m *IndexResponse) Reset()                    { *m = IndexResponse{} }
func (m *IndexResponse) String() string            { return proto.CompactTextString(m) }
func (*IndexResponse) ProtoMessage()               {}
func (*IndexResponse) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{4} }

// index config
type IndexConfig struct {
	GiftShow              int64  `protobuf:"varint,1,opt,name=gift_show,json=giftShow,proto3" json:"gift_show"`
	IndexTitle            string `protobuf:"bytes,2,opt,name=index_title,json=indexTitle,proto3" json:"index_title"`
	IndexShareTitle       string `protobuf:"bytes,3,opt,name=index_share_title,json=indexShareTitle,proto3" json:"index_share_title"`
	NewShareTxt           string `protobuf:"bytes,4,opt,name=new_share_txt,json=newShareTxt,proto3" json:"new_share_txt"`
	IndexShareImg         string `protobuf:"bytes,5,opt,name=index_share_img,json=indexShareImg,proto3" json:"index_share_img"`
	IndexHtmlTitle1       string `protobuf:"bytes,6,opt,name=index_html_title1,json=indexHtmlTitle1,proto3" json:"index_html_title1"`
	GameRule1             string `protobuf:"bytes,7,opt,name=game_rule1,json=gameRule1,proto3" json:"game_rule1"`
	GameRule2             string `protobuf:"bytes,8,opt,name=game_rule2,json=gameRule2,proto3" json:"game_rule2"`
	GameRule3             string `protobuf:"bytes,9,opt,name=game_rule3,json=gameRule3,proto3" json:"game_rule3"`
	GameRule4             string `protobuf:"bytes,10,opt,name=game_rule4,json=gameRule4,proto3" json:"game_rule4"`
	GameRule5             string `protobuf:"bytes,11,opt,name=game_rule5,json=gameRule5,proto3" json:"game_rule5"`
	MaxShare              int64  `protobuf:"varint,12,opt,name=max_share,json=maxShare,proto3" json:"max_share"`
	IndexBarTitle         string `protobuf:"bytes,13,opt,name=index_bar_title,json=indexBarTitle,proto3" json:"index_html_title1"`
	SuccessShareText5     string `protobuf:"bytes,14,opt,name=success_share_text5,json=successShareText5,proto3" json:"success_share_text5,omitempty"`
	UserHtmlTitle1        string `protobuf:"bytes,15,opt,name=user_html_title1,json=userHtmlTitle1,proto3" json:"user_html_title1,omitempty"`
	IndexPersonShareTitle string `protobuf:"bytes,16,opt,name=index_person_share_title,json=indexPersonShareTitle,proto3" json:"index_person_share_title,omitempty"`
	GamePersonShareTitle  string `protobuf:"bytes,17,opt,name=game_person_share_title,json=gamePersonShareTitle,proto3" json:"game_person_share_title,omitempty"`
	UserPersonShareTitle  string `protobuf:"bytes,18,opt,name=user_person_share_title,json=userPersonShareTitle,proto3" json:"user_person_share_title,omitempty"`
	GameFailedShareTitle  string `protobuf:"bytes,19,opt,name=game_failed_share_title,json=gameFailedShareTitle,proto3" json:"game_failed_share_title,omitempty"`
	GameSuccessShareTitle string `protobuf:"bytes,20,opt,name=game_success_share_title,json=gameSuccessShareTitle,proto3" json:"game_success_share_title,omitempty"`
	GameFailedShareImg    string `protobuf:"bytes,21,opt,name=game_failed_share_img,json=gameFailedShareImg,proto3" json:"game_failed_share_img,omitempty"`
	GameSuccessShareImg   string `protobuf:"bytes,22,opt,name=game_success_share_img,json=gameSuccessShareImg,proto3" json:"game_success_share_img,omitempty"`
	FailedShareText1      string `protobuf:"bytes,23,opt,name=failed_share_text1,json=failedShareText1,proto3" json:"failed_share_text1,omitempty"`
	FailedShareText2      string `protobuf:"bytes,24,opt,name=failed_share_text2,json=failedShareText2,proto3" json:"failed_share_text2,omitempty"`
	FailedShareText3      string `protobuf:"bytes,25,opt,name=failed_share_text3,json=failedShareText3,proto3" json:"failed_share_text3,omitempty"`
	FailedShareText4      string `protobuf:"bytes,26,opt,name=failed_share_text4,json=failedShareText4,proto3" json:"failed_share_text4,omitempty"`
	SuccessShareText1     string `protobuf:"bytes,27,opt,name=success_share_text1,json=successShareText1,proto3" json:"success_share_text1,omitempty"`
	SuccessShareText2     string `protobuf:"bytes,28,opt,name=success_share_text2,json=successShareText2,proto3" json:"success_share_text2,omitempty"`
	SuccessShareText3     string `protobuf:"bytes,29,opt,name=success_share_text3,json=successShareText3,proto3" json:"success_share_text3,omitempty"`
	SuccessShareText4     string `protobuf:"bytes,30,opt,name=success_share_text4,json=successShareText4,proto3" json:"success_share_text4,omitempty"`
	GameBarTitle          string `protobuf:"bytes,31,opt,name=game_bar_title,json=gameBarTitle,proto3" json:"game_bar_title,omitempty"`
	UserShareTitle        string `protobuf:"bytes,32,opt,name=user_share_title,json=userShareTitle,proto3" json:"user_share_title,omitempty"`
	UserShareImg          string `protobuf:"bytes,33,opt,name=user_share_img,json=userShareImg,proto3" json:"user_share_img,omitempty"`
	UserBarTitle          string `protobuf:"bytes,34,opt,name=user_bar_title,json=userBarTitle,proto3" json:"user_bar_title,omitempty"`
	GiftBarTitle          string `protobuf:"bytes,35,opt,name=gift_bar_title,json=giftBarTitle,proto3" json:"gift_bar_title,omitempty"`
	WzIf                  string `protobuf:"bytes,36,opt,name=wz_if,json=wzIf,proto3" json:"wz_if,omitempty"`
	TzType                string `protobuf:"bytes,37,opt,name=tz_type,json=tzType,proto3" json:"tz_type,omitempty"`
}

func (m *IndexConfig) Reset()                    { *m = IndexConfig{} }
func (m *IndexConfig) String() string            { return proto.CompactTextString(m) }
func (*IndexConfig) ProtoMessage()               {}
func (*IndexConfig) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{5} }

// user_share request
type GetUserShareRequest struct {
	EncryptedData string `protobuf:"bytes,1,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	Iv            string `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`
	UserId        int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetUserShareRequest) Reset()                    { *m = GetUserShareRequest{} }
func (m *GetUserShareRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserShareRequest) ProtoMessage()               {}
func (*GetUserShareRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{6} }

// user_share response
type GetUserShareResponse struct {
	Status      *RspStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Chance      int64      `protobuf:"varint,2,opt,name=chance,proto3" json:"chance"`
	Repeat      int64      `protobuf:"varint,3,opt,name=repeat,proto3" json:"repeat"`
	TodayShares int64      `protobuf:"varint,4,opt,name=today_shares,json=todayShares,proto3" json:"today_shares"`
	ErrorCode   int64      `protobuf:"varint,5,opt,name=error_code,json=errorCode,proto3" json:"error_code"`
}

func (m *GetUserShareResponse) Reset()                    { *m = GetUserShareResponse{} }
func (m *GetUserShareResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserShareResponse) ProtoMessage()               {}
func (*GetUserShareResponse) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{7} }

//  question request
type GetQuestionRequest struct {
	Sign   string `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	UserId int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetQuestionRequest) Reset()                    { *m = GetQuestionRequest{} }
func (m *GetQuestionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetQuestionRequest) ProtoMessage()               {}
func (*GetQuestionRequest) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{8} }

//  question response
type GetQuestionResponse struct {
	Status *RspStatus      `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Data   []*QuestionList `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *GetQuestionResponse) Reset()                    { *m = GetQuestionResponse{} }
func (m *GetQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetQuestionResponse) ProtoMessage()               {}
func (*GetQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{9} }

type QuestionList struct {
	Num1     int64   `protobuf:"varint,1,opt,name=num1,proto3" json:"num1"`
	Operator string  `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Num2     int64   `protobuf:"varint,3,opt,name=num2,proto3" json:"num2"`
	Result   int64   `protobuf:"varint,4,opt,name=result,proto3" json:"result"`
	Success  int64   `protobuf:"varint,5,opt,name=success,proto3" json:"success"`
	Seconds  float32 `protobuf:"fixed32,6,opt,name=seconds,proto3" json:"seconds"`
}

func (m *QuestionList) Reset()                    { *m = QuestionList{} }
func (m *QuestionList) String() string            { return proto.CompactTextString(m) }
func (*QuestionList) ProtoMessage()               {}
func (*QuestionList) Descriptor() ([]byte, []int) { return fileDescriptorQuestion, []int{10} }

func init() {
	proto.RegisterType((*RspStatus)(nil), "question.RspStatus")
	proto.RegisterType((*UploadResultRequest)(nil), "question.UploadResultRequest")
	proto.RegisterType((*UploadResultResponse)(nil), "question.UploadResultResponse")
	proto.RegisterType((*IndexRequest)(nil), "question.IndexRequest")
	proto.RegisterType((*IndexResponse)(nil), "question.IndexResponse")
	proto.RegisterType((*IndexConfig)(nil), "question.IndexConfig")
	proto.RegisterType((*GetUserShareRequest)(nil), "question.GetUserShareRequest")
	proto.RegisterType((*GetUserShareResponse)(nil), "question.GetUserShareResponse")
	proto.RegisterType((*GetQuestionRequest)(nil), "question.GetQuestionRequest")
	proto.RegisterType((*GetQuestionResponse)(nil), "question.GetQuestionResponse")
	proto.RegisterType((*QuestionList)(nil), "question.QuestionList")
}
func (m *RspStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *UploadResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadResultRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.UserId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *UploadResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadResultResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *IndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *IndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Chance != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Chance))
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Score))
	}
	if m.TodayShares != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.TodayShares))
	}
	if m.Goods != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Goods))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if len(m.Gift) > 0 {
		for _, s := range m.Gift {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Config != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Config.Size()))
		n3, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *IndexConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GiftShow != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.GiftShow))
	}
	if len(m.IndexTitle) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.IndexTitle)))
		i += copy(dAtA[i:], m.IndexTitle)
	}
	if len(m.IndexShareTitle) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.IndexShareTitle)))
		i += copy(dAtA[i:], m.IndexShareTitle)
	}
	if len(m.NewShareTxt) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.NewShareTxt)))
		i += copy(dAtA[i:], m.NewShareTxt)
	}
	if len(m.IndexShareImg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.IndexShareImg)))
		i += copy(dAtA[i:], m.IndexShareImg)
	}
	if len(m.IndexHtmlTitle1) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.IndexHtmlTitle1)))
		i += copy(dAtA[i:], m.IndexHtmlTitle1)
	}
	if len(m.GameRule1) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameRule1)))
		i += copy(dAtA[i:], m.GameRule1)
	}
	if len(m.GameRule2) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameRule2)))
		i += copy(dAtA[i:], m.GameRule2)
	}
	if len(m.GameRule3) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameRule3)))
		i += copy(dAtA[i:], m.GameRule3)
	}
	if len(m.GameRule4) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameRule4)))
		i += copy(dAtA[i:], m.GameRule4)
	}
	if len(m.GameRule5) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameRule5)))
		i += copy(dAtA[i:], m.GameRule5)
	}
	if m.MaxShare != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.MaxShare))
	}
	if len(m.IndexBarTitle) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.IndexBarTitle)))
		i += copy(dAtA[i:], m.IndexBarTitle)
	}
	if len(m.SuccessShareText5) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.SuccessShareText5)))
		i += copy(dAtA[i:], m.SuccessShareText5)
	}
	if len(m.UserHtmlTitle1) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.UserHtmlTitle1)))
		i += copy(dAtA[i:], m.UserHtmlTitle1)
	}
	if len(m.IndexPersonShareTitle) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.IndexPersonShareTitle)))
		i += copy(dAtA[i:], m.IndexPersonShareTitle)
	}
	if len(m.GamePersonShareTitle) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GamePersonShareTitle)))
		i += copy(dAtA[i:], m.GamePersonShareTitle)
	}
	if len(m.UserPersonShareTitle) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.UserPersonShareTitle)))
		i += copy(dAtA[i:], m.UserPersonShareTitle)
	}
	if len(m.GameFailedShareTitle) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameFailedShareTitle)))
		i += copy(dAtA[i:], m.GameFailedShareTitle)
	}
	if len(m.GameSuccessShareTitle) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameSuccessShareTitle)))
		i += copy(dAtA[i:], m.GameSuccessShareTitle)
	}
	if len(m.GameFailedShareImg) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameFailedShareImg)))
		i += copy(dAtA[i:], m.GameFailedShareImg)
	}
	if len(m.GameSuccessShareImg) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameSuccessShareImg)))
		i += copy(dAtA[i:], m.GameSuccessShareImg)
	}
	if len(m.FailedShareText1) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.FailedShareText1)))
		i += copy(dAtA[i:], m.FailedShareText1)
	}
	if len(m.FailedShareText2) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.FailedShareText2)))
		i += copy(dAtA[i:], m.FailedShareText2)
	}
	if len(m.FailedShareText3) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.FailedShareText3)))
		i += copy(dAtA[i:], m.FailedShareText3)
	}
	if len(m.FailedShareText4) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.FailedShareText4)))
		i += copy(dAtA[i:], m.FailedShareText4)
	}
	if len(m.SuccessShareText1) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.SuccessShareText1)))
		i += copy(dAtA[i:], m.SuccessShareText1)
	}
	if len(m.SuccessShareText2) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.SuccessShareText2)))
		i += copy(dAtA[i:], m.SuccessShareText2)
	}
	if len(m.SuccessShareText3) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.SuccessShareText3)))
		i += copy(dAtA[i:], m.SuccessShareText3)
	}
	if len(m.SuccessShareText4) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.SuccessShareText4)))
		i += copy(dAtA[i:], m.SuccessShareText4)
	}
	if len(m.GameBarTitle) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GameBarTitle)))
		i += copy(dAtA[i:], m.GameBarTitle)
	}
	if len(m.UserShareTitle) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.UserShareTitle)))
		i += copy(dAtA[i:], m.UserShareTitle)
	}
	if len(m.UserShareImg) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.UserShareImg)))
		i += copy(dAtA[i:], m.UserShareImg)
	}
	if len(m.UserBarTitle) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.UserBarTitle)))
		i += copy(dAtA[i:], m.UserBarTitle)
	}
	if len(m.GiftBarTitle) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.GiftBarTitle)))
		i += copy(dAtA[i:], m.GiftBarTitle)
	}
	if len(m.WzIf) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.WzIf)))
		i += copy(dAtA[i:], m.WzIf)
	}
	if len(m.TzType) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.TzType)))
		i += copy(dAtA[i:], m.TzType)
	}
	return i, nil
}

func (m *GetUserShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserShareRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EncryptedData) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.EncryptedData)))
		i += copy(dAtA[i:], m.EncryptedData)
	}
	if len(m.Iv) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Iv)))
		i += copy(dAtA[i:], m.Iv)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserShareResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Status.Size()))
		n4, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Chance != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Chance))
	}
	if m.Repeat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Repeat))
	}
	if m.TodayShares != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.TodayShares))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *GetQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sign) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Status.Size()))
		n5, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuestion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QuestionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Num1))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if m.Num2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Num2))
	}
	if m.Result != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Result))
	}
	if m.Success != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintQuestion(dAtA, i, uint64(m.Success))
	}
	if m.Seconds != 0 {
		dAtA[i] = 0x35
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Seconds))))
		i += 4
	}
	return i, nil
}

func encodeVarintQuestion(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRspStatus(r randyQuestion, easy bool) *RspStatus {
	this := &RspStatus{}
	this.Code = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Msg = string(randStringQuestion(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUploadResultRequest(r randyQuestion, easy bool) *UploadResultRequest {
	this := &UploadResultRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	this.Score = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Score *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUploadResultResponse(r randyQuestion, easy bool) *UploadResultResponse {
	this := &UploadResultResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedRspStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIndexRequest(r randyQuestion, easy bool) *IndexRequest {
	this := &IndexRequest{}
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIndexResponse(r randyQuestion, easy bool) *IndexResponse {
	this := &IndexResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedRspStatus(r, easy)
	}
	this.Chance = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Chance *= -1
	}
	this.Score = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Score *= -1
	}
	this.TodayShares = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TodayShares *= -1
	}
	this.Goods = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Goods *= -1
	}
	this.Sign = string(randStringQuestion(r))
	v1 := r.Intn(10)
	this.Gift = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Gift[i] = string(randStringQuestion(r))
	}
	if r.Intn(10) != 0 {
		this.Config = NewPopulatedIndexConfig(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIndexConfig(r randyQuestion, easy bool) *IndexConfig {
	this := &IndexConfig{}
	this.GiftShow = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GiftShow *= -1
	}
	this.IndexTitle = string(randStringQuestion(r))
	this.IndexShareTitle = string(randStringQuestion(r))
	this.NewShareTxt = string(randStringQuestion(r))
	this.IndexShareImg = string(randStringQuestion(r))
	this.IndexHtmlTitle1 = string(randStringQuestion(r))
	this.GameRule1 = string(randStringQuestion(r))
	this.GameRule2 = string(randStringQuestion(r))
	this.GameRule3 = string(randStringQuestion(r))
	this.GameRule4 = string(randStringQuestion(r))
	this.GameRule5 = string(randStringQuestion(r))
	this.MaxShare = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.MaxShare *= -1
	}
	this.IndexBarTitle = string(randStringQuestion(r))
	this.SuccessShareText5 = string(randStringQuestion(r))
	this.UserHtmlTitle1 = string(randStringQuestion(r))
	this.IndexPersonShareTitle = string(randStringQuestion(r))
	this.GamePersonShareTitle = string(randStringQuestion(r))
	this.UserPersonShareTitle = string(randStringQuestion(r))
	this.GameFailedShareTitle = string(randStringQuestion(r))
	this.GameSuccessShareTitle = string(randStringQuestion(r))
	this.GameFailedShareImg = string(randStringQuestion(r))
	this.GameSuccessShareImg = string(randStringQuestion(r))
	this.FailedShareText1 = string(randStringQuestion(r))
	this.FailedShareText2 = string(randStringQuestion(r))
	this.FailedShareText3 = string(randStringQuestion(r))
	this.FailedShareText4 = string(randStringQuestion(r))
	this.SuccessShareText1 = string(randStringQuestion(r))
	this.SuccessShareText2 = string(randStringQuestion(r))
	this.SuccessShareText3 = string(randStringQuestion(r))
	this.SuccessShareText4 = string(randStringQuestion(r))
	this.GameBarTitle = string(randStringQuestion(r))
	this.UserShareTitle = string(randStringQuestion(r))
	this.UserShareImg = string(randStringQuestion(r))
	this.UserBarTitle = string(randStringQuestion(r))
	this.GiftBarTitle = string(randStringQuestion(r))
	this.WzIf = string(randStringQuestion(r))
	this.TzType = string(randStringQuestion(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserShareRequest(r randyQuestion, easy bool) *GetUserShareRequest {
	this := &GetUserShareRequest{}
	this.EncryptedData = string(randStringQuestion(r))
	this.Iv = string(randStringQuestion(r))
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserShareResponse(r randyQuestion, easy bool) *GetUserShareResponse {
	this := &GetUserShareResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedRspStatus(r, easy)
	}
	this.Chance = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Chance *= -1
	}
	this.Repeat = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Repeat *= -1
	}
	this.TodayShares = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TodayShares *= -1
	}
	this.ErrorCode = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ErrorCode *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetQuestionRequest(r randyQuestion, easy bool) *GetQuestionRequest {
	this := &GetQuestionRequest{}
	this.Sign = string(randStringQuestion(r))
	this.UserId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UserId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetQuestionResponse(r randyQuestion, easy bool) *GetQuestionResponse {
	this := &GetQuestionResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedRspStatus(r, easy)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Data = make([]*QuestionList, v2)
		for i := 0; i < v2; i++ {
			this.Data[i] = NewPopulatedQuestionList(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQuestionList(r randyQuestion, easy bool) *QuestionList {
	this := &QuestionList{}
	this.Num1 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num1 *= -1
	}
	this.Operator = string(randStringQuestion(r))
	this.Num2 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num2 *= -1
	}
	this.Result = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Result *= -1
	}
	this.Success = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Success *= -1
	}
	this.Seconds = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Seconds *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyQuestion interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneQuestion(r randyQuestion) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringQuestion(r randyQuestion) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneQuestion(r)
	}
	return string(tmps)
}
func randUnrecognizedQuestion(r randyQuestion, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldQuestion(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldQuestion(dAtA []byte, r randyQuestion, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateQuestion(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateQuestion(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateQuestion(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateQuestion(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateQuestion(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateQuestion(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateQuestion(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RspStatus) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovQuestion(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	return n
}

func (m *UploadResultRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovQuestion(uint64(m.UserId))
	}
	if m.Score != 0 {
		n += 1 + sovQuestion(uint64(m.Score))
	}
	return n
}

func (m *UploadResultResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovQuestion(uint64(l))
	}
	return n
}

func (m *IndexRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovQuestion(uint64(m.UserId))
	}
	return n
}

func (m *IndexResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.Chance != 0 {
		n += 1 + sovQuestion(uint64(m.Chance))
	}
	if m.Score != 0 {
		n += 1 + sovQuestion(uint64(m.Score))
	}
	if m.TodayShares != 0 {
		n += 1 + sovQuestion(uint64(m.TodayShares))
	}
	if m.Goods != 0 {
		n += 1 + sovQuestion(uint64(m.Goods))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if len(m.Gift) > 0 {
		for _, s := range m.Gift {
			l = len(s)
			n += 1 + l + sovQuestion(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovQuestion(uint64(l))
	}
	return n
}

func (m *IndexConfig) Size() (n int) {
	var l int
	_ = l
	if m.GiftShow != 0 {
		n += 1 + sovQuestion(uint64(m.GiftShow))
	}
	l = len(m.IndexTitle)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.IndexShareTitle)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.NewShareTxt)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.IndexShareImg)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.IndexHtmlTitle1)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameRule1)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameRule2)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameRule3)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameRule4)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameRule5)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.MaxShare != 0 {
		n += 1 + sovQuestion(uint64(m.MaxShare))
	}
	l = len(m.IndexBarTitle)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.SuccessShareText5)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.UserHtmlTitle1)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.IndexPersonShareTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.GamePersonShareTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.UserPersonShareTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameFailedShareTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameSuccessShareTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameFailedShareImg)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameSuccessShareImg)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.FailedShareText1)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.FailedShareText2)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.FailedShareText3)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.FailedShareText4)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.SuccessShareText1)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.SuccessShareText2)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.SuccessShareText3)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.SuccessShareText4)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.GameBarTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.UserShareTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.UserShareImg)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.UserBarTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.GiftBarTitle)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.WzIf)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	l = len(m.TzType)
	if l > 0 {
		n += 2 + l + sovQuestion(uint64(l))
	}
	return n
}

func (m *GetUserShareRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovQuestion(uint64(m.UserId))
	}
	return n
}

func (m *GetUserShareResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.Chance != 0 {
		n += 1 + sovQuestion(uint64(m.Chance))
	}
	if m.Repeat != 0 {
		n += 1 + sovQuestion(uint64(m.Repeat))
	}
	if m.TodayShares != 0 {
		n += 1 + sovQuestion(uint64(m.TodayShares))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovQuestion(uint64(m.ErrorCode))
	}
	return n
}

func (m *GetQuestionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovQuestion(uint64(m.UserId))
	}
	return n
}

func (m *GetQuestionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovQuestion(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovQuestion(uint64(l))
		}
	}
	return n
}

func (m *QuestionList) Size() (n int) {
	var l int
	_ = l
	if m.Num1 != 0 {
		n += 1 + sovQuestion(uint64(m.Num1))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.Num2 != 0 {
		n += 1 + sovQuestion(uint64(m.Num2))
	}
	if m.Result != 0 {
		n += 1 + sovQuestion(uint64(m.Result))
	}
	if m.Success != 0 {
		n += 1 + sovQuestion(uint64(m.Success))
	}
	if m.Seconds != 0 {
		n += 5
	}
	return n
}

func sovQuestion(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuestion(x uint64) (n int) {
	return sovQuestion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RspStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RspStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RspStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chance", wireType)
			}
			m.Chance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayShares", wireType)
			}
			m.TodayShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayShares |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			m.Goods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Goods |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gift = append(m.Gift, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &IndexConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftShow", wireType)
			}
			m.GiftShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftShow |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewShareTxt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewShareTxt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexShareImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexShareImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexHtmlTitle1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexHtmlTitle1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRule1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameRule1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRule2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameRule2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRule3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameRule3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRule4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameRule4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRule5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameRule5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxShare", wireType)
			}
			m.MaxShare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxShare |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexBarTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexBarTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessShareText5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessShareText5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserHtmlTitle1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserHtmlTitle1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPersonShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexPersonShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GamePersonShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GamePersonShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPersonShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPersonShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameFailedShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameFailedShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSuccessShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSuccessShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameFailedShareImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameFailedShareImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSuccessShareImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSuccessShareImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedShareText1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedShareText1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedShareText2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedShareText2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedShareText3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedShareText3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedShareText4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedShareText4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessShareText1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessShareText1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessShareText2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessShareText2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessShareText3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessShareText3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessShareText4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessShareText4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameBarTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameBarTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserShareImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserShareImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBarTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBarTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftBarTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftBarTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WzIf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WzIf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TzType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TzType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RspStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chance", wireType)
			}
			m.Chance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeat", wireType)
			}
			m.Repeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayShares", wireType)
			}
			m.TodayShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayShares |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RspStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &QuestionList{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num1", wireType)
			}
			m.Num1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num2", wireType)
			}
			m.Num2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			m.Success = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Success |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Seconds = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuestion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuestion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuestion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuestion(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuestion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuestion   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("question.proto", fileDescriptorQuestion) }

var fileDescriptorQuestion = []byte{
	// 1272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x8f, 0xed, 0xc4, 0xb1, 0x9f, 0x63, 0x27, 0x19, 0xe7, 0xcf, 0x10, 0x5a, 0x6f, 0x58, 0x52,
	0x14, 0x15, 0x9a, 0xe2, 0xb5, 0xa3, 0x0a, 0x2a, 0x24, 0x70, 0x11, 0x25, 0x12, 0x12, 0x65, 0xd2,
	0x5e, 0xb8, 0x58, 0x1b, 0x7b, 0xec, 0xac, 0x14, 0xef, 0x9a, 0xdd, 0x71, 0xf3, 0xe7, 0x93, 0xf0,
	0x59, 0xf8, 0x04, 0x3d, 0x21, 0x8e, 0x9c, 0x2c, 0x5a, 0x6e, 0xbe, 0x70, 0xe5, 0xc0, 0x01, 0xcd,
	0x9b, 0x59, 0xef, 0xae, 0x33, 0xe5, 0x50, 0x89, 0xcb, 0xee, 0xcc, 0x7b, 0xbf, 0xdf, 0x9b, 0xf7,
	0x6f, 0xec, 0xb7, 0x50, 0xfb, 0x69, 0xc2, 0x23, 0xe1, 0x05, 0xfe, 0xd1, 0x38, 0x0c, 0x44, 0x40,
	0x4a, 0xf1, 0x7e, 0xef, 0xc1, 0xd0, 0x13, 0xe7, 0x93, 0xb3, 0xa3, 0x5e, 0x30, 0x7a, 0x38, 0x0c,
	0x86, 0xc1, 0x43, 0x04, 0x9c, 0x4d, 0x06, 0xb8, 0xc3, 0x0d, 0xae, 0x14, 0xd1, 0x7e, 0x0c, 0x65,
	0x16, 0x8d, 0x4f, 0x85, 0x2b, 0x26, 0x11, 0xb9, 0x03, 0xcb, 0xbd, 0xa0, 0xcf, 0x69, 0x6e, 0x3f,
	0x77, 0x58, 0xe8, 0x94, 0x66, 0x53, 0x0b, 0xf7, 0x0c, 0x9f, 0x64, 0x03, 0x0a, 0xa3, 0x68, 0x48,
	0xf3, 0xfb, 0xb9, 0xc3, 0x32, 0x93, 0x4b, 0xfb, 0x47, 0xa8, 0xbf, 0x18, 0x5f, 0x04, 0x6e, 0x9f,
	0xf1, 0x68, 0x72, 0x21, 0x18, 0x47, 0x2f, 0x88, 0x0d, 0xc5, 0x49, 0xc4, 0xc3, 0x93, 0xbe, 0x36,
	0x04, 0xb3, 0xa9, 0xa5, 0x25, 0x4c, 0xbf, 0x89, 0x05, 0x2b, 0x51, 0x2f, 0x08, 0x39, 0x9a, 0x2b,
	0x74, 0xca, 0xb3, 0xa9, 0xa5, 0x04, 0x4c, 0xbd, 0xec, 0x27, 0xb0, 0x95, 0xb5, 0x1d, 0x8d, 0x03,
	0x3f, 0xe2, 0xe4, 0x63, 0x28, 0x46, 0xe8, 0x2d, 0x1a, 0xaf, 0x38, 0xf5, 0xa3, 0x79, 0x2a, 0xe6,
	0x81, 0x30, 0x0d, 0xb1, 0x3f, 0x82, 0xb5, 0x13, 0xbf, 0xcf, 0xaf, 0x62, 0xcf, 0x76, 0xb2, 0x9e,
	0xc5, 0xde, 0xd8, 0xbf, 0xe6, 0xa1, 0xaa, 0x81, 0xef, 0x70, 0x8c, 0x0c, 0xb8, 0x77, 0xee, 0xfa,
	0xbd, 0x38, 0x1a, 0x0c, 0x58, 0x49, 0x98, 0x7e, 0x27, 0x01, 0x17, 0xcc, 0x01, 0x93, 0x16, 0xac,
	0x89, 0xa0, 0xef, 0x5e, 0x77, 0xa3, 0x73, 0x37, 0xe4, 0x11, 0x5d, 0x46, 0xdc, 0xc6, 0x6c, 0x6a,
	0x65, 0xe4, 0xac, 0x82, 0xbb, 0x53, 0xdc, 0x48, 0xab, 0xc3, 0x20, 0xe8, 0x47, 0x74, 0x25, 0xb1,
	0x8a, 0x02, 0xa6, 0x5e, 0xb2, 0xa4, 0x91, 0x37, 0xf4, 0x69, 0x51, 0x56, 0x4d, 0x95, 0x54, 0xee,
	0x19, 0x3e, 0xa5, 0x76, 0xe8, 0x0d, 0x04, 0x5d, 0xdd, 0x2f, 0xc4, 0x5a, 0xb9, 0x67, 0xf8, 0x24,
	0x9f, 0x41, 0xb1, 0x17, 0xf8, 0x03, 0x6f, 0x48, 0x4b, 0x98, 0x83, 0xed, 0x24, 0x07, 0x98, 0xac,
	0x27, 0xa8, 0xd4, 0xd1, 0xe2, 0x9a, 0xe9, 0xb7, 0xfd, 0x4f, 0x15, 0x2a, 0x29, 0x0c, 0xb9, 0x0f,
	0x65, 0x69, 0xb2, 0x1b, 0x9d, 0x07, 0x97, 0xba, 0x2b, 0xaa, 0xb3, 0xa9, 0x95, 0x08, 0x59, 0x49,
	0x2e, 0x4f, 0xcf, 0x83, 0x4b, 0xf2, 0x29, 0x54, 0x3c, 0x49, 0xed, 0x0a, 0x4f, 0x5c, 0xa8, 0x94,
	0x96, 0x3b, 0xeb, 0xb3, 0xa9, 0x95, 0x16, 0x33, 0xc0, 0xcd, 0x73, 0xb9, 0x26, 0x5f, 0xc1, 0xa6,
	0x52, 0x61, 0x8a, 0x34, 0xaf, 0x80, 0xbc, 0xed, 0xd9, 0xd4, 0xba, 0xad, 0x64, 0xeb, 0x28, 0xc2,
	0x24, 0x2a, 0x13, 0xc7, 0x50, 0xf5, 0xf9, 0x65, 0x8c, 0xb9, 0x12, 0x98, 0xfe, 0x72, 0x67, 0x73,
	0x36, 0xb5, 0xb2, 0x0a, 0x56, 0xf1, 0xf9, 0xa5, 0x22, 0x5e, 0x09, 0xf2, 0x18, 0xd6, 0xd3, 0xc6,
	0xbd, 0xd1, 0x10, 0x2b, 0x51, 0xee, 0xd4, 0x67, 0x53, 0x6b, 0x51, 0xc5, 0xaa, 0xc9, 0xa9, 0x27,
	0xa3, 0x61, 0xe2, 0xf6, 0xb9, 0x18, 0x5d, 0x28, 0xc7, 0x9a, 0xba, 0x50, 0x29, 0xb7, 0x53, 0x4a,
	0xed, 0xf6, 0xb7, 0x62, 0x74, 0x81, 0x5e, 0x37, 0xc9, 0x03, 0x80, 0xa1, 0x3b, 0xe2, 0xdd, 0x70,
	0x22, 0xb9, 0xab, 0xc8, 0xad, 0xcd, 0xa6, 0x56, 0x4a, 0xca, 0xca, 0x72, 0xcd, 0x26, 0x8b, 0x70,
	0x07, 0xab, 0xba, 0x08, 0x77, 0x12, 0xb8, 0x93, 0x81, 0xb7, 0x68, 0xd9, 0x00, 0x6f, 0x25, 0xf0,
	0x56, 0x06, 0xde, 0xa6, 0x60, 0x80, 0xb7, 0x13, 0x78, 0x3b, 0x03, 0x3f, 0xa6, 0x15, 0x03, 0xfc,
	0x38, 0x81, 0x1f, 0xcb, 0x16, 0x1a, 0xb9, 0x3a, 0x9b, 0x74, 0x2d, 0x69, 0xa1, 0xb9, 0x90, 0x95,
	0x46, 0xae, 0x4a, 0x2e, 0xf9, 0x22, 0x2e, 0xcb, 0x99, 0x1b, 0xea, 0x76, 0xa8, 0xfe, 0x57, 0x5e,
	0x55, 0x61, 0x3a, 0x6e, 0xa8, 0x9a, 0xe1, 0x08, 0xea, 0xd1, 0xa4, 0xd7, 0xe3, 0x51, 0x14, 0xd7,
	0x9d, 0x5f, 0x89, 0x63, 0x5a, 0xc3, 0x5f, 0xbe, 0x4d, 0xad, 0x52, 0x3d, 0x20, 0x15, 0xe4, 0x10,
	0x36, 0xe4, 0x0f, 0x49, 0xa6, 0x8e, 0xeb, 0x08, 0xae, 0x49, 0x79, 0xaa, 0x5e, 0x8f, 0x80, 0xaa,
	0xd3, 0xc7, 0x3c, 0x8c, 0x02, 0x3f, 0xd3, 0xb0, 0x1b, 0xc8, 0xd8, 0x46, 0xfd, 0x33, 0x54, 0x67,
	0xfa, 0x73, 0x17, 0xd3, 0x62, 0xe0, 0x6d, 0x22, 0x6f, 0x4b, 0xaa, 0x4d, 0x34, 0xf4, 0xcc, 0x40,
	0x23, 0x8a, 0x26, 0xd5, 0x6f, 0x3d, 0x6d, 0xe0, 0x7a, 0x17, 0xbc, 0x9f, 0xa1, 0xd5, 0x93, 0xd3,
	0xbe, 0x41, 0x6d, 0x8a, 0xf6, 0x08, 0x28, 0xd2, 0x16, 0x92, 0x87, 0xbc, 0x2d, 0x15, 0x9d, 0xd4,
	0x9f, 0xa6, 0x13, 0x88, 0xc4, 0x26, 0x6c, 0xdf, 0x3e, 0x4f, 0x5e, 0xa6, 0x6d, 0x64, 0x91, 0x85,
	0xd3, 0xe4, 0xe5, 0x69, 0xc1, 0x8e, 0xe1, 0x2c, 0xc9, 0xd9, 0x41, 0x4e, 0x7d, 0xf1, 0x24, 0x49,
	0xfa, 0x04, 0x48, 0x36, 0x24, 0x7e, 0x25, 0x9a, 0x74, 0x17, 0x09, 0x1b, 0x83, 0x54, 0x38, 0x52,
	0x6e, 0x44, 0x3b, 0x94, 0x1a, 0xd1, 0x8e, 0x11, 0xdd, 0xa2, 0xef, 0x19, 0xd1, 0x2d, 0x23, 0xba,
	0x4d, 0xf7, 0x8c, 0xe8, 0xb6, 0xb9, 0x21, 0x9b, 0xf4, 0x7d, 0x73, 0x43, 0x36, 0xcd, 0x78, 0x87,
	0xde, 0x31, 0xe3, 0x1d, 0x33, 0xbe, 0x45, 0xef, 0x9a, 0xf1, 0x2d, 0x33, 0xbe, 0x4d, 0x1b, 0x66,
	0x7c, 0x9b, 0x1c, 0x40, 0x0d, 0x8b, 0x95, 0x5c, 0x47, 0x0b, 0xa1, 0x6b, 0x52, 0x3a, 0xbf, 0x76,
	0xf1, 0x35, 0x4a, 0xb7, 0xcd, 0x7e, 0x72, 0x8d, 0x52, 0xfd, 0x72, 0x00, 0xb5, 0x14, 0x52, 0x16,
	0xfd, 0x03, 0x65, 0x6f, 0x8e, 0x93, 0xd5, 0x8e, 0x51, 0xc9, 0xa9, 0x76, 0x82, 0x9a, 0x9f, 0x2a,
	0x7d, 0x93, 0xff, 0x42, 0x09, 0xea, 0x43, 0xed, 0x9b, 0x37, 0x10, 0x73, 0x54, 0x1d, 0x56, 0x2e,
	0x6f, 0xba, 0xde, 0x80, 0x1e, 0xa0, 0x72, 0xf9, 0xf2, 0xe6, 0x64, 0x40, 0x76, 0x61, 0x55, 0xdc,
	0x74, 0xc5, 0xf5, 0x98, 0xd3, 0x7b, 0x28, 0x2e, 0x8a, 0x9b, 0xe7, 0xd7, 0x63, 0x6e, 0xf7, 0xa0,
	0xfe, 0x94, 0x8b, 0x17, 0xb1, 0x33, 0xf1, 0xf8, 0x71, 0x00, 0x55, 0xee, 0xf7, 0xc2, 0xeb, 0xb1,
	0xe0, 0xfd, 0xaf, 0x5d, 0xe1, 0xe2, 0x3f, 0x61, 0x99, 0x65, 0x85, 0xa4, 0x06, 0x79, 0xef, 0xa5,
	0x1e, 0xb3, 0xf2, 0xde, 0xcb, 0xd4, 0xd0, 0x52, 0xc8, 0x0c, 0x2d, 0x7f, 0xe5, 0x60, 0x2b, 0x7b,
	0xca, 0xff, 0x35, 0xbb, 0xd8, 0x50, 0x0c, 0xf9, 0x98, 0xbb, 0x42, 0x0f, 0x2f, 0x88, 0x51, 0x12,
	0xa6, 0xdf, 0xef, 0x36, 0xbe, 0x3c, 0x00, 0xe0, 0x61, 0x18, 0x84, 0x5d, 0x1c, 0x3b, 0xd5, 0x0c,
	0x83, 0x7f, 0x01, 0x89, 0x94, 0x95, 0x71, 0xfd, 0x24, 0xe8, 0x73, 0xfb, 0x4b, 0x20, 0x4f, 0xb9,
	0xf8, 0x41, 0x07, 0x13, 0x67, 0x95, 0xe8, 0x11, 0x47, 0x25, 0x53, 0x0d, 0x36, 0x49, 0xce, 0xf2,
	0x99, 0x9c, 0xf9, 0x58, 0x98, 0xc4, 0xc2, 0xbb, 0x64, 0xec, 0x3e, 0x2c, 0xf7, 0x65, 0xf1, 0xf2,
	0xfb, 0x85, 0xc3, 0x8a, 0xb3, 0x93, 0x40, 0x63, 0xb3, 0xdf, 0x79, 0x91, 0x60, 0x88, 0xb1, 0x7f,
	0xcf, 0xc1, 0x5a, 0x5a, 0x2c, 0x27, 0x2e, 0x7f, 0x32, 0x6a, 0xa6, 0x47, 0x6c, 0xb9, 0x67, 0xf8,
	0x24, 0x7b, 0x50, 0x0a, 0xc6, 0x3c, 0x74, 0x45, 0x10, 0xea, 0x06, 0x98, 0xef, 0x35, 0xd3, 0xd1,
	0x25, 0x88, 0x99, 0x0e, 0x32, 0x1d, 0x55, 0x22, 0x39, 0x28, 0xeb, 0xc4, 0xeb, 0x12, 0xe1, 0xe8,
	0xac, 0xdf, 0xe4, 0x1e, 0xac, 0xea, 0xab, 0xa9, 0x53, 0x5d, 0x99, 0x4d, 0xad, 0x58, 0xc4, 0xe2,
	0x05, 0xc2, 0x78, 0x2f, 0xf0, 0xfb, 0x11, 0x0e, 0x23, 0x79, 0x0d, 0x53, 0x22, 0x16, 0x2f, 0x9c,
	0x5f, 0xf2, 0x50, 0x8a, 0x43, 0x23, 0x9f, 0xc3, 0x0a, 0x8e, 0x7b, 0x64, 0x67, 0x61, 0x46, 0xd4,
	0x45, 0xda, 0xdb, 0xbd, 0x25, 0x57, 0xa9, 0xb7, 0x97, 0xc8, 0x33, 0x58, 0x4f, 0xd5, 0x44, 0x65,
	0x29, 0x41, 0xdf, 0x2e, 0xf8, 0xde, 0xdd, 0xb7, 0x68, 0xe7, 0x16, 0xbf, 0x87, 0xb5, 0xf4, 0xc5,
	0x20, 0x59, 0xc2, 0xe2, 0xb5, 0xdc, 0x6b, 0xbc, 0x4d, 0x9d, 0x36, 0x98, 0xfe, 0x18, 0x49, 0x1b,
	0x34, 0x7c, 0x00, 0xa5, 0x0d, 0x9a, 0xbe, 0x61, 0xec, 0xa5, 0x0e, 0x7d, 0xf5, 0xba, 0xb1, 0xf4,
	0xf7, 0xeb, 0x46, 0xee, 0xd5, 0x9b, 0x46, 0xee, 0xb7, 0x37, 0x8d, 0xdc, 0x1f, 0x6f, 0x1a, 0xb9,
	0x9f, 0xff, 0x6c, 0x2c, 0x9d, 0x15, 0xf1, 0xbb, 0xac, 0xf5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd7, 0x46, 0xb1, 0x5b, 0xe2, 0x0d, 0x00, 0x00,
}
