// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: question.proto

/*
Package question is a generated protocol buffer package.

It is generated from these files:
	question.proto

It has these top-level messages:
	RspStatus
	GetGiftRequest
	GetGiftResponse
	AwardRecordRequest
	AwardRecordResponse
	Award
	UploadResultRequest
	UploadResultResponse
	IndexRequest
	IndexResponse
	Rank
	RankInfo
	RankList
	GiftInfo
	IndexConfig
	GetUserShareRequest
	GetUserShareResponse
	GetQuestionRequest
	GetQuestionResponse
	QuestionList
*/
package question

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Question service

type QuestionService interface {
	Index(ctx context.Context, in *IndexRequest, opts ...client.CallOption) (*IndexResponse, error)
	GetQuestionList(ctx context.Context, in *GetQuestionRequest, opts ...client.CallOption) (*GetQuestionResponse, error)
	GetUserShare(ctx context.Context, in *GetUserShareRequest, opts ...client.CallOption) (*GetUserShareResponse, error)
	UploadResult(ctx context.Context, in *UploadResultRequest, opts ...client.CallOption) (*UploadResultResponse, error)
	GetAwardRecord(ctx context.Context, in *AwardRecordRequest, opts ...client.CallOption) (*AwardRecordResponse, error)
	GetGift(ctx context.Context, in *GetGiftRequest, opts ...client.CallOption) (*GetGiftResponse, error)
}

type questionService struct {
	c    client.Client
	name string
}

func NewQuestionService(name string, c client.Client) QuestionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "question"
	}
	return &questionService{
		c:    c,
		name: name,
	}
}

func (c *questionService) Index(ctx context.Context, in *IndexRequest, opts ...client.CallOption) (*IndexResponse, error) {
	req := c.c.NewRequest(c.name, "Question.Index", in)
	out := new(IndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) GetQuestionList(ctx context.Context, in *GetQuestionRequest, opts ...client.CallOption) (*GetQuestionResponse, error) {
	req := c.c.NewRequest(c.name, "Question.GetQuestionList", in)
	out := new(GetQuestionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) GetUserShare(ctx context.Context, in *GetUserShareRequest, opts ...client.CallOption) (*GetUserShareResponse, error) {
	req := c.c.NewRequest(c.name, "Question.GetUserShare", in)
	out := new(GetUserShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) UploadResult(ctx context.Context, in *UploadResultRequest, opts ...client.CallOption) (*UploadResultResponse, error) {
	req := c.c.NewRequest(c.name, "Question.UploadResult", in)
	out := new(UploadResultResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) GetAwardRecord(ctx context.Context, in *AwardRecordRequest, opts ...client.CallOption) (*AwardRecordResponse, error) {
	req := c.c.NewRequest(c.name, "Question.GetAwardRecord", in)
	out := new(AwardRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionService) GetGift(ctx context.Context, in *GetGiftRequest, opts ...client.CallOption) (*GetGiftResponse, error) {
	req := c.c.NewRequest(c.name, "Question.GetGift", in)
	out := new(GetGiftResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Question service

type QuestionHandler interface {
	Index(context.Context, *IndexRequest, *IndexResponse) error
	GetQuestionList(context.Context, *GetQuestionRequest, *GetQuestionResponse) error
	GetUserShare(context.Context, *GetUserShareRequest, *GetUserShareResponse) error
	UploadResult(context.Context, *UploadResultRequest, *UploadResultResponse) error
	GetAwardRecord(context.Context, *AwardRecordRequest, *AwardRecordResponse) error
	GetGift(context.Context, *GetGiftRequest, *GetGiftResponse) error
}

func RegisterQuestionHandler(s server.Server, hdlr QuestionHandler, opts ...server.HandlerOption) {
	type question interface {
		Index(ctx context.Context, in *IndexRequest, out *IndexResponse) error
		GetQuestionList(ctx context.Context, in *GetQuestionRequest, out *GetQuestionResponse) error
		GetUserShare(ctx context.Context, in *GetUserShareRequest, out *GetUserShareResponse) error
		UploadResult(ctx context.Context, in *UploadResultRequest, out *UploadResultResponse) error
		GetAwardRecord(ctx context.Context, in *AwardRecordRequest, out *AwardRecordResponse) error
		GetGift(ctx context.Context, in *GetGiftRequest, out *GetGiftResponse) error
	}
	type Question struct {
		question
	}
	h := &questionHandler{hdlr}
	s.Handle(s.NewHandler(&Question{h}, opts...))
}

type questionHandler struct {
	QuestionHandler
}

func (h *questionHandler) Index(ctx context.Context, in *IndexRequest, out *IndexResponse) error {
	return h.QuestionHandler.Index(ctx, in, out)
}

func (h *questionHandler) GetQuestionList(ctx context.Context, in *GetQuestionRequest, out *GetQuestionResponse) error {
	return h.QuestionHandler.GetQuestionList(ctx, in, out)
}

func (h *questionHandler) GetUserShare(ctx context.Context, in *GetUserShareRequest, out *GetUserShareResponse) error {
	return h.QuestionHandler.GetUserShare(ctx, in, out)
}

func (h *questionHandler) UploadResult(ctx context.Context, in *UploadResultRequest, out *UploadResultResponse) error {
	return h.QuestionHandler.UploadResult(ctx, in, out)
}

func (h *questionHandler) GetAwardRecord(ctx context.Context, in *AwardRecordRequest, out *AwardRecordResponse) error {
	return h.QuestionHandler.GetAwardRecord(ctx, in, out)
}

func (h *questionHandler) GetGift(ctx context.Context, in *GetGiftRequest, out *GetGiftResponse) error {
	return h.QuestionHandler.GetGift(ctx, in, out)
}
